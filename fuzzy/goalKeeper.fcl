FUNCTION_BLOCK selfMade	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables
	targetDist : REAL;
	targetTheta: REAL;
END_VAR

VAR_OUTPUT				// Define output variable
	linearVelocity: REAL;
	angularVelocity: REAL;
END_VAR

FUZZIFY targetDist
	TERM close := trian -20 0 20;
	TERM middle := trian 0 40 80;
	TERM far := trape 70 125 412 412;
END_FUZZIFY

FUZZIFY targetTheta
	TERM L6 := trian -540 -180 -155;
    TERM L5 := trian -180 -155 -125;
    TERM L4 := trian -155 -125 -95;
    TERM L3 := trian -125 -95 -65;
    TERM L2 := trian -95 -65 -35;
    TERM L1 := trian -65 -35 -5;
	TERM straight := trian -5 0 5;
	TERM R1 := trian 5 35 65;
	TERM R2 := trian 35 65 95;
	TERm R3 := trian 65 95 125;
	TERM R4 := trian 95 125 155;
	TERM R5 := trian 125 155 180;
	TERM R6 := trian 155 180 540;
END_FUZZIFY

DEFUZZIFY linearVelocity
	TERM verySlow :=  trian -0.15 0.05 0.15;
	TERM snail := trian 0.05 0.15 0.3;
 	TERM slow := trian 0.15 0.3 0.45;
	TERM medium := trian 0.5 0.7 1;
	TERM fast := trian 0.7 1 1.25;
	METHOD : COG;
	DEFAULT :=0;
END_DEFUZZIFY

DEFUZZIFY angularVelocity
	TERM L6 := trian -7.5 -6.5 -5.5;
	TERM L5 := trian -6.5 -5.5 -4.5;
	TERM L4 := trian -5.5 -4.5 -3.5;
	TERM L3 := trian -4.5 -3.5 -2.5;
	TERM L2 := trian -3.5 -1.5 -0.8;
	TERM L1 := trian -1.5 -0.8 -0.2;
	TERM zero := trian -0.2 0 0.2;
	TERM R1 := trian 0.2 0.8 1.5;
	TERM R2 := trian 0.8 1.5 3.5;
	TERM R3 := trian 2.5 3.5 4.5;
	TERM R4 := trian 3.5 4.5 5.5;
	TERM R5 := trian 4.5 5.5 6.5;
	TERM R6 := trian 5.5 6.5 7.5;
	METHOD : COG;
	DEFAULT :=0;
END_DEFUZZIFY


RULEBLOCK No1
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'max' accumulation method

	//RULE 1 : IF service IS poor OR food IS rancid THEN tip IS cheap;
	//RULE 2 : IF service IS good THEN tip IS average;
	//RULE 3 : IF service IS excellent AND food IS delicious THEN tip IS generous;

	RULE 1: IF targetTheta IS R6 Then angularVelocity is R6;
	RULE 2: IF targetTheta is R5 then angularVelocity is R5;
	RULE 3: if targetTheta is R4 THEN angularVelocity is R4;
	RULE 4: if targetTheta is R3 THEN angularVelocity is R3;
	RULE 5: if targetTheta is R2 THEN angularVelocity is R2;
	RULE 6: if targetTheta is R1 THEN angularVelocity is R1;

	RULE 7: if targetTheta is straight THEN angularVelocity is zero;

	RULE 1: IF targetTheta IS L6 Then angularVelocity is L6;
	RULE 2: IF targetTheta is L5 then angularVelocity is L5;
	RULE 3: if targetTheta is L4 THEN angularVelocity is L4;
	RULE 4: if targetTheta is L3 THEN angularVelocity is L3;
	RULE 5: if targetTheta is L2 THEN angularVelocity is L2;
	RULE 6: if targetTheta is L1 THEN angularVelocity is L1;


	RULE 8: if targetDist is close AND targetTheta is R6 THEN linearVelocity is slow;
	RULE 8: if targetDist is close AND targetTheta is R5 THEN linearVelocity is slow;
	RULE 8: if targetDist is close AND targetTheta is R4 THEN linearVelocity is slow;
	RULE 8: if targetDist is close AND targetTheta is R3 THEN linearVelocity is slow;
	RULE 8: if targetDist is close AND targetTheta is R2 THEN linearVelocity is slow;
	RULE 8: if targetDist is close AND targetTheta is R1 THEN linearVelocity is slow;
	RULE 8: if targetDist is close AND targetTheta is straight THEN linearVelocity is slow;
	RULE 8: if targetDist is close AND targetTheta is L6 THEN linearVelocity is slow;
	RULE 8: if targetDist is close AND targetTheta is L5 THEN linearVelocity is slow;
	RULE 8: if targetDist is close AND targetTheta is L4 THEN linearVelocity is snail;
	RULE 8: if targetDist is close AND targetTheta is L3 THEN linearVelocity is snail;
	RULE 8: if targetDist is close AND targetTheta is L2 THEN linearVelocity is slow;
	RULE 8: if targetDist is close AND targetTheta is L1 THEN linearVelocity is slow;

	RULE 8: if targetDist is middle AND targetTheta is R6 THEN linearVelocity is slow;
    RULE 8: if targetDist is middle AND targetTheta is R5 THEN linearVelocity is slow;
    RULE 8: if targetDist is middle AND targetTheta is R4 THEN linearVelocity is slow;
    RULE 8: if targetDist is middle AND targetTheta is R3 THEN linearVelocity is slow;
    RULE 8: if targetDist is middle AND targetTheta is R2 THEN linearVelocity is slow;
    RULE 8: if targetDist is middle AND targetTheta is R1 THEN linearVelocity is slow;
    RULE 8: if targetDist is middle AND targetTheta is straight THEN linearVelocity is slow;
    RULE 8: if targetDist is middle AND targetTheta is L6 THEN linearVelocity is slow;
    RULE 8: if targetDist is middle AND targetTheta is L5 THEN linearVelocity is slow;
    RULE 8: if targetDist is middle AND targetTheta is L4 THEN linearVelocity is slow;
    RULE 8: if targetDist is middle AND targetTheta is L3 THEN linearVelocity is slow;
    RULE 8: if targetDist is middle AND targetTheta is L2 THEN linearVelocity is slow;
    RULE 8: if targetDist is middle AND targetTheta is L1 THEN linearVelocity is slow;

	RULE 8: if targetDist is far AND targetTheta is R6 THEN linearVelocity is slow;
	RULE 8: if targetDist is far AND targetTheta is R5 THEN linearVelocity is slow;
	RULE 8: if targetDist is far AND targetTheta is R4 THEN linearVelocity is slow;
	RULE 8: if targetDist is far AND targetTheta is R3 THEN linearVelocity is slow;
	RULE 8: if targetDist is far AND targetTheta is R2 THEN linearVelocity is slow;
	RULE 8: if targetDist is far AND targetTheta is R1 THEN linearVelocity is slow;
	RULE 8: if targetDist is far AND targetTheta is straight THEN linearVelocity is slow;
	RULE 8: if targetDist is far AND targetTheta is L6 THEN linearVelocity is slow;
	RULE 8: if targetDist is far AND targetTheta is L5 THEN linearVelocity is slow;
	RULE 8: if targetDist is far AND targetTheta is L4 THEN linearVelocity is slow;
	RULE 8: if targetDist is far AND targetTheta is L3 THEN linearVelocity is slow;
	RULE 8: if targetDist is far AND targetTheta is L2 THEN linearVelocity is slow;
	RULE 8: if targetDist is far AND targetTheta is L1 THEN linearVelocity is slow;

END_RULEBLOCK

END_FUNCTION_BLOCK
