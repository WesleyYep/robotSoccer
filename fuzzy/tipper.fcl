/*
	Example: A tip calculation FIS (fuzzy inference system)
	Calculates tip based on 'servie' and 'food'

	If you want to about this example (and fuzzy logic), please 
	read Matlab's tutorial on fuzzy logic toolbox 
	http://www.mathworks.com/access/helpdesk/help/pdf_doc/fuzzy/fuzzy.pdf

									Pablo Cingolani 
									pcingola@users.sourceforge.net
*/

FUNCTION_BLOCK tipper	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables
	targetDist: REAL;
	targetTheta: REAL;
	obstacleDist: REAL;
	obstacleTheta: REAL;
END_VAR

VAR_OUTPUT				// Define output variable
	angSpeedError: REAL;
END_VAR


FUZZIFY obstacleDist			// Fuzzify input variable 'food': { 'rancid', 'delicious' }
	TERM near := gauss 0 1.3;
	TERM far := gauss 3 1.3;
END_FUZZIFY

FUZZIFY obstacleTheta			// Fuzzify input variable 'food': { 'rancid', 'delicious' }
	TERM left := gauss -1 0.85;
	TERM right := gauss 1 0.85;
END_FUZZIFY

FUZZIFY targetDist			// Fuzzify input variable 'food': { 'rancid', 'delicious' }
	TERM near := gauss 0 1.3;
	TERM far := gauss 3 1.3;
END_FUZZIFY

FUZZIFY targetTheta			// Fuzzify input variable 'food': { 'rancid', 'delicious' }
	TERM left := gauss -3 2.55;
	TERM right := gauss 3 2.55;
	TERM targetdirection := gauss 0 0.5;
END_FUZZIFY



DEFUZZIFY angSpeedError			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM turnleft := gauss -20 17;
	TERM turnright := gauss 20 17;
	TERM zero := gauss 0 2.5;
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK No1
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'max' accumulation method

	//RULE 1 : IF service IS poor OR food IS rancid THEN tip IS cheap;
	//RULE 2 : IF service IS good THEN tip IS average; 
	//RULE 3 : IF service IS excellent AND food IS delicious THEN tip IS generous;
	
	RULE 1 : IF targetTheta IS right THEN angSpeedError is turnright;
	RULE 2 : IF targetTheta IS left THEN angSpeedError is turnleft;
	RULE 3 : IF obstacleDist IS near AND targetDist IS far AND obstacleTheta IS left THEN angSpeedError is turnright;
	RULE 4 : IF obstacleDist IS near AND targetDist IS far AND obstacleTheta IS right THEN angSpeedError is turnleft;
	RULE 5 : IF targetTheta IS targetdirection THEN angSpeedError is zero;
	RULE 6 : IF obstacleDist IS far AND targetTheta IS targetdirection THEN angSpeedError is zero;
	
END_RULEBLOCK

END_FUNCTION_BLOCK