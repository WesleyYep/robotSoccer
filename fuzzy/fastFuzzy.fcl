/*
	Example: A tip calculation FIS (fuzzy inference system)
	Calculates tip based on 'servie' and 'food'

	If you want to about this example (and fuzzy logic), please 
	read Matlab's tutorial on fuzzy logic toolbox 
	http://www.mathworks.com/access/helpdesk/help/pdf_doc/fuzzy/fuzzy.pdf
	http://www.wseas.us/e-library/conferences/2009/rodos/SYSTEMS/SYSTEMS73.pdf
									Pablo Cingolani 
									pcingola@users.sourceforge.net
*/

FUNCTION_BLOCK fastFuzzy	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables
	targetDist: REAL;
	targetTheta: REAL;
END_VAR

VAR_OUTPUT				// Define output variable
	linearVelocity: REAL;
	angularVelocity: REAL;
END_VAR

FUZZIFY targetDist
	TERM close :=  trian 0 10 20;
	TERM middle := trian 10 20 30;
	TERM far := trape 25 30 300 320;
END_FUZZIFY

FUZZIFY targetTheta
	TERM behindLeft := trian -540 -180 -40;
	TERM frontLeft := trian -45 -30 0;
	TERM straight := trian -10 0 10;
	TERM frontRight := trian 0 30 45;
	TERM behindRight := trian 40 180 540;
END_FUZZIFY 

DEFUZZIFY linearVelocity
	TERM stop := trian -0.1 0 0.1;
	TERM slow := trian 0.1 0.4 0.6;
	TERM medium := trian 0.4 0.6 0.8;
	TERM fast := trian 0.8 1 1.3;
	METHOD : COG;
	DEFAULT :=0;
END_DEFUZZIFY

DEFUZZIFY angularVelocity
	TERM LR := trian -9 -7 -5;
	TERM MR := trian -7 -5 -1;
	TERM SR := trian -2 -0.5 0;
	TERM zero := trian -0.5 0 0.5;
	TERM SL := trian 0 0.5 2;
	TERM ML := trian 1 5 7;
	TERM LL := trian 5 7 9;
	METHOD : COG;
	DEFAULT :=0;
END_DEFUZZIFY


RULEBLOCK No1
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'max' accumulation method
	
	//RULE 1 : IF service IS poor OR food IS rancid THEN tip IS cheap;
	//close
	RULE 1 : if targetDist IS close and targetTheta is straight THEN linearVelocity is fast;
	RULE 2 : if targetDist IS close and targetTheta is straight THEN angularVelocity is zero;
	
	RULE 3 : if targetDist is close and targetTheta is frontLeft THEN linearVelocity is slow;
	RULE 4 : if targetDist is close and targetTheta is frontLeft THEN angularVelocity is SL;
	
	RULE 5 : if targetDist is close and targetTheta is frontRight THEN linearVelocity is slow;
	RULE 6 : if targetDist is close and targetTheta is frontRight THEN angularVelocity is SR;
	
	RULE 7 : if targetDist is close and targetTheta is behindLeft THEn linearVelocity is slow;
	RULE 8 : if targetDist is close and targetTheta is behindLeft then angularVelocity is LL;
	
	RULE 9 : if targetDist is close and targetTheta is behindRight then linearVelocity is slow;
	RULE 10 : if targetDist is close and targetTheta is behindRight then angularVelocity is LR;
	
	//middle
	RULE 11 : if targetDist IS middle and targetTheta is straight THEN linearVelocity is fast;
	RULE 12 : if targetDist IS middle and targetTheta is straight THEN angularVelocity is zero;
	
	RULE 13 : if targetDist is middle and targetTheta is frontLeft THEN linearVelocity is slow;
	RULE 14 : if targetDist is middle and targetTheta is frontLeft THEN angularVelocity is SL;
	
	RULE 15 : if targetDist is middle and targetTheta is frontRight THEN linearVelocity is slow;
	RULE 16 : if targetDist is middle and targetTheta is frontRight THEN angularVelocity is SR;
	
	RULE 17 : if targetDist is middle and targetTheta is behindLeft THEn linearVelocity is slow;
	RULE 18 : if targetDist is middle and targetTheta is behindLeft then angularVelocity is LL;
	
	RULE 19 : if targetDist is middle and targetTheta is behindRight then linearVelocity is slow;
	RULE 20 : if targetDist is middle and targetTheta is behindRight then angularVelocity is LR;
	
	//far
	RULE 11 : if targetDist IS far and targetTheta is straight THEN linearVelocity is fast;
	RULE 12 : if targetDist IS far and targetTheta is straight THEN angularVelocity is zero;
	
	RULE 13 : if targetDist is far and targetTheta is frontLeft THEN linearVelocity is medium;
	RULE 14 : if targetDist is far and targetTheta is frontLeft THEN angularVelocity is SL;
	
	RULE 15 : if targetDist is far and targetTheta is frontRight THEN linearVelocity is medium;
	RULE 16 : if targetDist is far and targetTheta is frontRight THEN angularVelocity is SR;
	
	RULE 17 : if targetDist is far and targetTheta is behindLeft THEn linearVelocity is medium;
	RULE 18 : if targetDist is far and targetTheta is behindLeft then angularVelocity is ML;
	
	RULE 19 : if targetDist is far and targetTheta is behindRight then linearVelocity is medium;
	RULE 20 : if targetDist is far and targetTheta is behindRight then angularVelocity is MR;

END_RULEBLOCK

END_FUNCTION_BLOCK

